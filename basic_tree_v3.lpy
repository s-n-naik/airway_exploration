from openalea.lpy import *
import random
import numpy as np
import turtle
# STILL AN ISSUE WHERE THE DOMAIN BRANCHING MAINSTEM DOESNT WORK PROPERLY


# param set

p='C'

_growth_rate  = 1 # growth rate or branches per timestep, t

beta = 3/2
radius = lambda order: r_0 * np.power(2, -order/beta) # weibel decay
nbiter = 18 # one timestep = one iteration
# scaffold params
trachea_vector = np.array([-0.01299,	0.19485,	0.980747])
l_0 = 5
r_0 = 1
tilt_angle = 15
branch_angle = 30
omega = 5
#alpha: branching angle rel to parent dirn (about U ^/&)
#theta_1: domain initial angle (about H, /\)  
#o: current generation (to increment on bifurcation)
#c: colour of current system 
#Produces a symmettric bifurcation starting at an angle theta_1 relative to parent heading direction
# colours for diff modes
c_orig = (197,126,20)
c_domain = (100,120,186)
c_planar = (148,206,135)
c_orthog = (249,105,116)
cmap = {'L':(0,0,0), "C":(255,0,0), "R":(0,255,0)}
# function definitions
U = Vector3()

def EndEach(lstring):
  # prints out the lstring to the terminal at each derivation step + the length of the lstring
  #print('length lstring:',len(lstring))
  #print('lstring', lstring)
  #print(getIterationNb())
  pass

def StartEach():
  # try with csv
  n = getIterationNb()
  prev = getGroup()
  useGroup(1)
  if  n <= 5:
    useGroup(3)
  elif (n > 5) & (n <= 12):
    useGroup(2)
  else:
    useGroup(1)
  print('Group:',prev,'-->',getGroup(), 'Iteration', getIterationNb())
  U = GetPos('x,y,z' )
  print(U)
  
def get_params_planar(t,o):
  alpha = 20
  theta_1 = 40
  omega = 1
 
  return alpha, theta_1, omega
  

    
def get_params_orthog(t,o):
  alpha = 45
  theta_1 = 20
  omega = 2
  return alpha, theta_1, omega
  
def get_params_domain(t,o):
  alpha = 30
  theta_1 = 20
  omega = 2
  delta_theta = 90
  return alpha, theta_1, omega, delta_theta

module I
module A 
module B


Axiom: @GcI(0.001, r_0,c_orig,0) Pinpoint(trachea_vector)I(l_0, r_0,c_orig,0) [/(0) &(branch_angle) +(tilt_angle)A(0,1, c_orig,"L")][/(180) &(branch_angle) +(tilt_angle)A(0,1, c_orig,"R")]
derivation length: nbiter

production:

consider: I


group 1:
# PLANAR BIFURCATION
A(t,o, c,p=="L") :
  
  alpha, theta_1, omega = get_params_planar(t,o) # nnote need to change this to lobe dependent params
  if t < omega:
     # simply produces a metamer and ages the apex
     
     produce I(_growth_rate, radius(o),c,o) A(t+1,o, c,p) 
  
  else:
    if c != c_planar: # when switching domains start at theta_1 orientation
      produce [/(theta_1)&(alpha) A(0,o+1,c_planar,p)][/(theta_1+180) &(alpha) A(0,o+1,c_planar,p)]
    else:
      produce [/(0)&(alpha) A(0,o+1,c_planar,p)][/(0+180) &(alpha) A(0,o+1,c_planar,p)]

endgroup

group 2:
# ORTHOG BIFURCATION
A(t,o, c,p) :
  
  alpha, theta_1, omega = get_params_orthog(t,o) # nnote need to change this to lobe dependent params
  if t < omega:
     # simply produces a metamer and ages the apex
     
     produce I(_growth_rate, radius(o),c,o) A(t+1,o, c,p)
  
  else:
    if c != c_orthog:
      produce [/(theta_1)&(alpha) A(0,o+1,c_orthog,p)][/(theta_1+180) &(alpha) A(0,o+1,c_orthog,p)]
    else:
      produce [/(90)&(alpha) A(0,o+1,c_orthog,p)][/(90+180) &(alpha) A(0,o+1,c_orthog,p)]
endgroup 

group 3:
# DOMAIN BRANCHING
A(t,o, c,p) :
  
  alpha, theta_1, omega, delta_theta = get_params_domain(t,o) # nnote need to change this to lobe dependent params
  
  if t < omega:
     # simply produces a metamer and ages the apex
     
     produce I(_growth_rate, radius(o),c,o) A(t+1,o, c,p) 
  
  else:
    if c != c_domain:
      produce [/(theta_1) &(alpha)A(0,o+1, c_domain,p)]/(delta_theta)A(0,o+1, c_domain,p)
    else:
      produce [ &(alpha)A(0,o+1, c_domain,p)]/(delta_theta)A(0,o+1, c_domain,p)
      
endgroup 

interpretation:
I(l,r, c,o) --> @SetColor(c[0], c[1], c[2])F(l,r)#@SetColor(0,0,0)@L(str(o))
A(t,o, c,p) --> @SetColor(cmap[p][0],cmap[p][1],cmap[p][2]) @O(0.2) 

#I(l,r, c,o) --> turtle.F(l,r)#conda @L(str(turtle.GetHead))
#A(t,o, c,p) --> turtle.O(0.2) #@SetColor(cmap[p][0],cmap[p][1],cmap[p][2]) 

homomorphism:

endlsystem
